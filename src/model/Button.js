/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Button model module.
 * @module model/Button
 * @version 0.0.1
 */
class Button {
    /**
     * Constructs a new <code>Button</code>.
     * @alias module:model/Button
     * @param link {String} Ex: https://local.curedao.org
     * @param text {String} Ex: Connect
     */
    constructor(link, text) { 
        
        Button.initialize(this, link, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, link, text) { 
        obj['link'] = link;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>Button</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Button} obj Optional instance to populate.
     * @return {module:model/Button} The populated <code>Button</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Button();

            if (data.hasOwnProperty('accessibilityText')) {
                obj['accessibilityText'] = ApiClient.convertToType(data['accessibilityText'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], Object);
            }
            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('confirmationText')) {
                obj['confirmationText'] = ApiClient.convertToType(data['confirmationText'], 'String');
            }
            if (data.hasOwnProperty('functionName')) {
                obj['functionName'] = ApiClient.convertToType(data['functionName'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('ionIcon')) {
                obj['ionIcon'] = ApiClient.convertToType(data['ionIcon'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = ApiClient.convertToType(data['stateName'], 'String');
            }
            if (data.hasOwnProperty('stateParams')) {
                obj['stateParams'] = ApiClient.convertToType(data['stateParams'], Object);
            }
            if (data.hasOwnProperty('successToastText')) {
                obj['successToastText'] = ApiClient.convertToType(data['successToastText'], 'String');
            }
            if (data.hasOwnProperty('successAlertTitle')) {
                obj['successAlertTitle'] = ApiClient.convertToType(data['successAlertTitle'], 'String');
            }
            if (data.hasOwnProperty('successAlertBody')) {
                obj['successAlertBody'] = ApiClient.convertToType(data['successAlertBody'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('tooltip')) {
                obj['tooltip'] = ApiClient.convertToType(data['tooltip'], 'String');
            }
            if (data.hasOwnProperty('webhookUrl')) {
                obj['webhookUrl'] = ApiClient.convertToType(data['webhookUrl'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Ex: connect
 * @member {String} accessibilityText
 */
Button.prototype['accessibilityText'] = undefined;

/**
 * Action data
 * @member {Object} action
 */
Button.prototype['action'] = undefined;

/**
 * Ex: connect
 * @member {String} additionalInformation
 */
Button.prototype['additionalInformation'] = undefined;

/**
 * Ex: #f2f2f2
 * @member {String} color
 */
Button.prototype['color'] = undefined;

/**
 * Text to show user before executing functionName
 * @member {String} confirmationText
 */
Button.prototype['confirmationText'] = undefined;

/**
 * Name of function to call
 * @member {String} functionName
 */
Button.prototype['functionName'] = undefined;

/**
 * Data to provide to functionName or be copied to the card parameters when button is clicked and card is posted to the API
 * @member {Object} parameters
 */
Button.prototype['parameters'] = undefined;

/**
 * Ex: connect
 * @member {String} html
 */
Button.prototype['html'] = undefined;

/**
 * HTML element id
 * @member {String} id
 */
Button.prototype['id'] = undefined;

/**
 * Ex: https://image.jpg
 * @member {String} image
 */
Button.prototype['image'] = undefined;

/**
 * Ex: ion-refresh
 * @member {String} ionIcon
 */
Button.prototype['ionIcon'] = undefined;

/**
 * Ex: https://local.curedao.org
 * @member {String} link
 */
Button.prototype['link'] = undefined;

/**
 * State to go to
 * @member {String} stateName
 */
Button.prototype['stateName'] = undefined;

/**
 * Data to provide to the state
 * @member {Object} stateParams
 */
Button.prototype['stateParams'] = undefined;

/**
 * Text to show user after executing functionName
 * @member {String} successToastText
 */
Button.prototype['successToastText'] = undefined;

/**
 * Text to show user after executing functionName
 * @member {String} successAlertTitle
 */
Button.prototype['successAlertTitle'] = undefined;

/**
 * Text to show user after executing functionName
 * @member {String} successAlertBody
 */
Button.prototype['successAlertBody'] = undefined;

/**
 * Ex: Connect
 * @member {String} text
 */
Button.prototype['text'] = undefined;

/**
 * Ex: This is a tooltip
 * @member {String} tooltip
 */
Button.prototype['tooltip'] = undefined;

/**
 * Post here on button click
 * @member {String} webhookUrl
 */
Button.prototype['webhookUrl'] = undefined;






export default Button;

