/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConversionStep from './ConversionStep';
import UnitCategory from './UnitCategory';

/**
 * The Unit model module.
 * @module model/Unit
 * @version 0.0.1
 */
class Unit {
    /**
     * Constructs a new <code>Unit</code>.
     * @alias module:model/Unit
     * @param abbreviatedName {String} Unit abbreviation
     * @param category {module:model/Unit.CategoryEnum} Unit category
     * @param conversionSteps {Array.<module:model/ConversionStep>} Conversion steps list
     * @param maximumValue {Number} Ex: 4
     * @param name {String} Unit name
     * @param unitCategory {module:model/UnitCategory} 
     */
    constructor(abbreviatedName, category, conversionSteps, maximumValue, name, unitCategory) { 
        
        Unit.initialize(this, abbreviatedName, category, conversionSteps, maximumValue, name, unitCategory);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abbreviatedName, category, conversionSteps, maximumValue, name, unitCategory) { 
        obj['abbreviatedName'] = abbreviatedName;
        obj['category'] = category;
        obj['conversionSteps'] = conversionSteps;
        obj['maximumValue'] = maximumValue;
        obj['name'] = name;
        obj['unitCategory'] = unitCategory;
    }

    /**
     * Constructs a <code>Unit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Unit} obj Optional instance to populate.
     * @return {module:model/Unit} The populated <code>Unit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Unit();

            if (data.hasOwnProperty('abbreviatedName')) {
                obj['abbreviatedName'] = ApiClient.convertToType(data['abbreviatedName'], 'String');
            }
            if (data.hasOwnProperty('advanced')) {
                obj['advanced'] = ApiClient.convertToType(data['advanced'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('categoryName')) {
                obj['categoryName'] = ApiClient.convertToType(data['categoryName'], 'String');
            }
            if (data.hasOwnProperty('conversionSteps')) {
                obj['conversionSteps'] = ApiClient.convertToType(data['conversionSteps'], [ConversionStep]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('manualTracking')) {
                obj['manualTracking'] = ApiClient.convertToType(data['manualTracking'], 'Number');
            }
            if (data.hasOwnProperty('maximumAllowedValue')) {
                obj['maximumAllowedValue'] = ApiClient.convertToType(data['maximumAllowedValue'], 'Number');
            }
            if (data.hasOwnProperty('maximumValue')) {
                obj['maximumValue'] = ApiClient.convertToType(data['maximumValue'], 'Number');
            }
            if (data.hasOwnProperty('minimumAllowedValue')) {
                obj['minimumAllowedValue'] = ApiClient.convertToType(data['minimumAllowedValue'], 'Number');
            }
            if (data.hasOwnProperty('minimumValue')) {
                obj['minimumValue'] = ApiClient.convertToType(data['minimumValue'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unitCategory')) {
                obj['unitCategory'] = UnitCategory.constructFromObject(data['unitCategory']);
            }
        }
        return obj;
    }


}

/**
 * Unit abbreviation
 * @member {String} abbreviatedName
 */
Unit.prototype['abbreviatedName'] = undefined;

/**
 * Ex: 1
 * @member {Number} advanced
 */
Unit.prototype['advanced'] = undefined;

/**
 * Unit category
 * @member {module:model/Unit.CategoryEnum} category
 */
Unit.prototype['category'] = undefined;

/**
 * Ex: 6
 * @member {Number} categoryId
 */
Unit.prototype['categoryId'] = undefined;

/**
 * Ex: Miscellany
 * @member {String} categoryName
 */
Unit.prototype['categoryName'] = undefined;

/**
 * Conversion steps list
 * @member {Array.<module:model/ConversionStep>} conversionSteps
 */
Unit.prototype['conversionSteps'] = undefined;

/**
 * Ex: 29
 * @member {Number} id
 */
Unit.prototype['id'] = undefined;

/**
 * Ex: 0
 * @member {Number} manualTracking
 */
Unit.prototype['manualTracking'] = undefined;

/**
 * The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
 * @member {Number} maximumAllowedValue
 */
Unit.prototype['maximumAllowedValue'] = undefined;

/**
 * Ex: 4
 * @member {Number} maximumValue
 */
Unit.prototype['maximumValue'] = undefined;

/**
 * The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
 * @member {Number} minimumAllowedValue
 */
Unit.prototype['minimumAllowedValue'] = undefined;

/**
 * Ex: 0
 * @member {Number} minimumValue
 */
Unit.prototype['minimumValue'] = undefined;

/**
 * Unit name
 * @member {String} name
 */
Unit.prototype['name'] = undefined;

/**
 * @member {module:model/UnitCategory} unitCategory
 */
Unit.prototype['unitCategory'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Unit['CategoryEnum'] = {

    /**
     * value: "Distance"
     * @const
     */
    "Distance": "Distance",

    /**
     * value: "Duration"
     * @const
     */
    "Duration": "Duration",

    /**
     * value: "Energy"
     * @const
     */
    "Energy": "Energy",

    /**
     * value: "Frequency"
     * @const
     */
    "Frequency": "Frequency",

    /**
     * value: "Miscellany"
     * @const
     */
    "Miscellany": "Miscellany",

    /**
     * value: "Pressure"
     * @const
     */
    "Pressure": "Pressure",

    /**
     * value: "Proportion"
     * @const
     */
    "Proportion": "Proportion",

    /**
     * value: "Rating"
     * @const
     */
    "Rating": "Rating",

    /**
     * value: "Temperature"
     * @const
     */
    "Temperature": "Temperature",

    /**
     * value: "Volume"
     * @const
     */
    "Volume": "Volume",

    /**
     * value: "Weight"
     * @const
     */
    "Weight": "Weight",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count"
};



export default Unit;

