/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MeasurementUpdate model module.
 * @module model/MeasurementUpdate
 * @version 0.0.1
 */
class MeasurementUpdate {
    /**
     * Constructs a new <code>MeasurementUpdate</code>.
     * @alias module:model/MeasurementUpdate
     * @param id {Number} Variable id of the measurement to be updated
     */
    constructor(id) {

        MeasurementUpdate.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) {
        obj['id'] = id;
    }

    /**
     * Constructs a <code>MeasurementUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementUpdate} obj Optional instance to populate.
     * @return {module:model/MeasurementUpdate} The populated <code>MeasurementUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementUpdate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Variable id of the measurement to be updated
 * @member {Number} id
 */
MeasurementUpdate.prototype['id'] = undefined;

/**
 * The new note for the measurement (optional)
 * @member {String} note
 */
MeasurementUpdate.prototype['note'] = undefined;

/**
 * The new timestamp for the the event in epoch seconds (optional)
 * @member {Number} startTime
 */
MeasurementUpdate.prototype['startTime'] = undefined;

/**
 * The new value of for the measurement (optional)
 * @member {Number} value
 */
MeasurementUpdate.prototype['value'] = undefined;






export default MeasurementUpdate;

