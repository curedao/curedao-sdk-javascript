/**
 * CureDAO Unified Health API
 * A community-owned platform for crowdsourced clinical research
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserTag model module.
 * @module model/UserTag
 * @version 0.0.1
 */
class UserTag {
    /**
     * Constructs a new <code>UserTag</code>.
     * @alias module:model/UserTag
     * @param conversionFactor {Number} Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value
     * @param taggedVariableId {Number} This is the id of the variable being tagged with an ingredient or something.
     * @param tagVariableId {Number} This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
     */
    constructor(conversionFactor, taggedVariableId, tagVariableId) {

        UserTag.initialize(this, conversionFactor, taggedVariableId, tagVariableId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conversionFactor, taggedVariableId, tagVariableId) {
        obj['conversionFactor'] = conversionFactor;
        obj['taggedVariableId'] = taggedVariableId;
        obj['tagVariableId'] = tagVariableId;
    }

    /**
     * Constructs a <code>UserTag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserTag} obj Optional instance to populate.
     * @return {module:model/UserTag} The populated <code>UserTag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserTag();

            if (data.hasOwnProperty('conversionFactor')) {
                obj['conversionFactor'] = ApiClient.convertToType(data['conversionFactor'], 'Number');
            }
            if (data.hasOwnProperty('taggedVariableId')) {
                obj['taggedVariableId'] = ApiClient.convertToType(data['taggedVariableId'], 'Number');
            }
            if (data.hasOwnProperty('tagVariableId')) {
                obj['tagVariableId'] = ApiClient.convertToType(data['tagVariableId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Number by which we multiply the tagged variable value to obtain the tag variable (ingredient) value
 * @member {Number} conversionFactor
 */
UserTag.prototype['conversionFactor'] = undefined;

/**
 * This is the id of the variable being tagged with an ingredient or something.
 * @member {Number} taggedVariableId
 */
UserTag.prototype['taggedVariableId'] = undefined;

/**
 * This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
 * @member {Number} tagVariableId
 */
UserTag.prototype['tagVariableId'] = undefined;






export default UserTag;

